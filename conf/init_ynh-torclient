#!/bin/bash
### BEGIN INIT INFO
# Provides: ynh-torclient
# Required-Start:    $network $remote_fs $syslog ynh-hotspot
# Required-Stop:     $network $remote_fs $syslog ynh-hotspot
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Set prerequisites for wifi torclient.
# Description:       Set prerequisites for wifi torclient.
### END INIT INFO

# Functions
## State functions

has_torclient_app() {
  [ -e /tmp/.ynh-torclient-started ]
}

has_hotspot_app() {
  [ -e /tmp/.ynh-hotspot-started ]
}

is_nat_set() {
  iptables -nvt nat -L PREROUTING | grep REDIRECT | grep -q "${ynh_wifi_device}"
}

is_tor_running() {
  service tor status &> /dev/null
}

is_running() {
  has_hotspot_app && is_tor_running && is_nat_set
}

set_nat() {
  iptables -t nat -A PREROUTING -i "${ynh_wifi_device}" -p udp --dport 53 -j REDIRECT --to-ports 9053
  iptables -t nat -A PREROUTING -i "${ynh_wifi_device}" -p tcp ! --dport 53 --syn -j REDIRECT --to-ports 9040
}

set_forwarding() {
  sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null
  sysctl -w net.ipv4.conf.all.forwarding=1 > /dev/null
}

unset_nat() {
  internet_device=${1}

  iptables -t nat -D PREROUTING -i "${ynh_wifi_device}" -p udp --dport 53 -j REDIRECT --to-ports 9053
  iptables -t nat -D PREROUTING -i "${ynh_wifi_device}" -p tcp ! --dport 53 --syn -j REDIRECT --to-ports 9040
}

stop_tor() {
  service tor stop &> /dev/null
}

start_tor() {
  cp /etc/tor/torrc{.tpl,}

  sed "s|<TPL:TOR_NETWORK>|${ynh_wifi_prefix}|g" -i /etc/tor/torrc

  service tor start
}

## Tools

moulinette_get() {
  var=${1}

  value=$(yunohost app setting torclient "${var}")

  if [[ "${value}" =~ "An instance is already running" ]]; then
    echo "${value}" >&2
    exit 1
  fi

  echo "${value}"
}

moulinette_set() {
  var=${1}
  value=${2}

  msg=$(yunohost app setting torclient "${var}" -v "${value}")

  if [ ! $? -eq 0 ]; then
    echo "${msg}" >&2
    exit 1
  fi
}

moulinette_hotspot_get() {
  var=${1}

  value=$(yunohost app setting hotspot "${var}")

  if [[ "${value}" =~ "An instance is already running" ]]; then
    echo "${value}" >&2
    exit 1
  fi

  echo "${value}"
} 

do_start() {
  if is_running; then
    echo "Already started"
  elif [ "${ynh_service_enabled}" -eq 0 ]; then
    echo "Disabled service"
  elif ! has_hotspot_app; then
    echo "[ERR] Hotspot is not running"
  else
    echo "[torclient] Starting..."
    touch /tmp/.ynh-torclient-started

    # Run tor
    if ! is_tor_running; then
      echo "Run Tor"
      start_tor
    fi

    # Set ipv4 NAT
    if ! is_nat_set; then
      echo "Set NAT settings"
      set_nat
    fi
  fi
}

do_stop() {
  echo "[torclient] Stopping..."
  rm -f /tmp/.ynh-torclient-started

  if is_nat_set; then
    echo "Unset NAT"
    unset_nat
  fi

  if is_tor_running; then
    echo "Stop Tor"
    stop_tor
  fi
}

do_status() {
  exitcode=0

  if [ "${ynh_service_enabled}" -eq 0 ]; then
    echo "[ERR] Tor Client Service disabled"
    exitcode=1
  fi

  if ! has_hotspot_app; then
    echo "[ERR] Hotspot is not running"
    exitcode=1
  fi

  if is_tor_running; then
    echo "[OK] Tor is running"
  else
    echo "[ERR] Tor is not running"
    exitcode=1
  fi

  if is_nat_set; then
    echo "[OK] IPv4 nat rules set"
  else
    echo "[ERR] No IPv4 nat rules set"
    exitcode=1
  fi

  exit ${exitcode}
}

# Restart php5-fpm at the first start (it needs to be restarted after the slapd start)
if [ ! -e /tmp/.ynh-torclient-boot ]; then
  touch /tmp/.ynh-torclient-boot
  service php5-fpm restart
fi

# Variables

echo -n "Retrieving Yunohost settings... "

ynh_service_enabled=$(moulinette_get service_enabled)
ynh_wifi_device_id=$(moulinette_get wifi_device_id)

if [ "${ynh_wifi_device_id}" -eq 0 ]; then
  ynh_wifi_device=$(moulinette_hotspot_get wifi_device)
else
  ynh_wifi_device="hotspot${ynh_wifi_device_id}"
fi

echo OK

IFS='|' read -a ynh_wifi_ssid <<< "$(moulinette_hotspot_get wifi_ssid)"
IFS='|' read -a ynh_wifi_prefix <<< "$(moulinette_hotspot_get ip4_nat_prefix)"
ynh_wifi_prefix=${ynh_wifi_prefix[$ynh_wifi_device_id]}
ynh_wifi_ssid=${ynh_wifi_ssid[$ynh_wifi_device_id]}

#echo "Torclient will be active on $ynh_wifi_device device and $ynh_wifi_ssid SSID with $ynh_wifi_prefix prefix"

case "$1" in
  start)
    do_start
    ;;
  stop)
    do_stop
    ;;
  restart)
    do_stop
    do_start
    ;;
  status)
    do_status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
  ;;
esac

exit 0
